(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{577:function(t,e,s){t.exports=s.p+"assets/img/recuiters.d1fc4d7f.jpg"},578:function(t,e,s){t.exports=s.p+"assets/img/sqlcss-website-snapshot.84f27ccb.png"},579:function(t,e,s){t.exports=s.p+"assets/img/db-snapshot.c772f8e9.jpg"},580:function(t,e,s){t.exports=s.p+"assets/img/connect-demo2.328402b0.jpg"},599:function(t,e,s){"use strict";s.r(e);var a=s(12),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("本人翻译者系前端工程师")]),t._v(" "),a("p",[t._v("原文标题：Yes, I can connect to a DB in CSS")]),t._v(" "),a("p",[t._v("原文作者：Memeloper")]),t._v(" "),a("p",[t._v("原文地址：https://www.leemeichin.com/posts/yes-i-can-connect-to-a-db-in-css.html")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(577),alt:""}})]),t._v(" "),a("h3",{attrs:{id:"故事背景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#故事背景"}},[t._v("#")]),t._v(" 故事背景")]),t._v(" "),a("p",[t._v("某公司招聘需求如下:")]),t._v(" "),a("p",[t._v("我们正在寻求可以"),a("strong",[t._v("使用CSS连接数据库")]),t._v("的前端伙伴~")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://media.giphy.com/media/c4u2gld3Or69i/giphy.gif",alt:""}})]),t._v(" "),a("p",[t._v("自从我上次开始一个高质量的“发帖”以来，已经有很长一段时间了，事实上，它已经很长一段时间了，那时候我的词汇表中可能还没有“水帖”这个词。")]),t._v(" "),a("p",[t._v("为此，我受到了一个早期项目的启发，该项目基于区块链初创公司将投资者的脸投影到3D立方体上让我想起了以前的互联网，那时一切都很奇怪。")]),t._v(" "),a("p",[t._v("好汉不提当年勇。所以今天，我将讨论如何管理我自己的新项目:"),a("a",{attrs:{href:"https://www.sqlcss.xyz",title:"sqlcss.xyz",target:"_blank",rel:"noopener noreferrer"}},[t._v("sqlcss.xyz"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("img",{attrs:{src:s(578),alt:""}})]),t._v(" "),a("p",[t._v("顾名思义，这就是使用CSS连接数据库的方式。不幸的是，它"),a("strong",[t._v("只能在Chrome中工作")]),t._v("，但你可以提供任何你喜欢的SQLite数据库，并通过CSS查询它。")]),t._v(" "),a("p",[t._v("它是如何工作的?")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://media.giphy.com/media/13FrpeVH09Zrb2/giphy.gif",alt:""}})]),t._v(" "),a("p",[t._v("首先我们需要用到一组被亲切地称为"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Guide/Houdini",title:"CSS Houdini",target:"_blank",rel:"noopener noreferrer"}},[t._v("Houdini"),a("OutboundLink")],1),t._v("的api，它让你的浏览器能够通过Javascript对象模型来控制CSS。换言之，这意味着您可以定制CSS样式、添加定制属性，等等。")]),t._v(" "),a("p",[t._v("可能这个作品最大的特性是"),a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet",title:"CSS Paint Worklet",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSS Paint Worklet"),a("OutboundLink")],1),t._v("，它允许你在一个元素上“绘制”，就像你知道和喜欢的画布一样，并让浏览器把它当作CSS中的图像。这里有一些例子可以用来"),a("a",{attrs:{href:"https://houdini.how/",title:"houdini how",target:"_blank",rel:"noopener noreferrer"}},[t._v("演示Houdini"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("然而，这个工作集只提供了Worker API的一个子集，而且画布上下文本身也被大量剥离。这样做的实际结果是，您的自定义CSS绘制代码提供了一个比您预期的更小的沙盒。")]),t._v(" "),a("p",[t._v("这意味着什么? 没有网络访问权限，因此可以和fetch和XmlHttpRequest说再见了。在绘制上下文上没有drawText功能。其他各种JS api也消失了，以防你希望解决这些问题。")]),t._v(" "),a("p",[t._v("不过，不用担心。并非一切都完了。让我们把它分解成几个步骤。")]),t._v(" "),a("hr"),t._v(" "),a("h3",{attrs:{id:"_1-设置数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-设置数据库"}},[t._v("#")]),t._v(" 1. 设置数据库")]),t._v(" "),a("p",[t._v("这必须是第一步，以便理解概念证明是否可行。")]),t._v(" "),a("p",[t._v("首先我们会借助于"),a("a",{attrs:{href:"https://sql.js.org/#/",title:"sql.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("sql.js"),a("OutboundLink")],1),t._v("。它实际上是一个通过emscripten编译成WebAssembly和老式ASM.js的SQLite版本。不幸的是，我们不能使用WASM版本，因为它必须通过网络获取二进制文件。ASM版本没有这个限制，因为所有的代码都可以在一个模块中使用。")]),t._v(" "),a("p",[t._v("虽然PaintWorklet限制了worker内部的网络访问，但你仍然可以导入代码，只要它是一个ES6模块。这意味着文件中必须有一个导出语句。不幸的是，sql.js没有ES6的版本，所以我自己修改了sql.js，使其能够顺利的被import进入项目。")]),t._v(" "),a("p",[t._v("现在到了关键时刻:我可以在我的工作包中建立一个数据库吗?")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SQL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("initSqlJs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("locateFile")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("file")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("./")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("DB")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SQL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Database")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("**成功了!**但没有任何数据，所以我们来解决这个问题。")]),t._v(" "),a("h3",{attrs:{id:"_2-查询数据库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-查询数据库"}},[t._v("#")]),t._v(" 2. 查询数据库")]),t._v(" "),a("p",[t._v("一开始最简单的方法就是设置一些假数据,sql.js有两个函数可以做到这一点。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("DB.run('CREATE TABLE test (name TEXT NOT NULL)')\nDB.run(\n  'INSERT INTO test VALUES (?), (?), (?), (?)',\n  ['A', 'B', 'C', 'D']\n)\n")])])]),a("p",[t._v("我有了测试表，里面有一些值。我应该能够查询这个并获得这些值，尽管我不确定得到什么样的结构化查询结果。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const result = DB.exec('SELECT * FROM test')\nconsole.log(result)\n")])])]),a("p",[t._v("正如预期的那样，结果已经出来了。不过，渲染展示通过CSS查询数据库的结果会更好。")]),t._v(" "),a("h3",{attrs:{id:"_3-渲染结果-最简单的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-渲染结果-最简单的方法"}},[t._v("#")]),t._v(" 3. 渲染结果，最简单的方法")]),t._v(" "),a("p",[t._v("我认为这就像在画布上写文本一样。这有多难，对吧?")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class SqlDB {\n  async paint(ctx, geom, properties) {\n    const result = DB.exec('SELECT * FROM test');\n    ctx.font = '32px monospace';\n    ctx.drawText(JSON.stringify(result), 0, 0, geom.width);\n  }\n}\n")])])]),a("p",[t._v("不，那样就太简单了。这里的上下文与画布元素的上下文不同，它只提供了功能的一个子集。")]),t._v(" "),a("p",[t._v("当然，它仍然可以绘制路径和曲线，所以缺乏方便的API是一个障碍，但这一切都不是问题。")]),t._v(" "),a("h3",{attrs:{id:"_4-不使用文本api创建文本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-不使用文本api创建文本"}},[t._v("#")]),t._v(" 4. 不使用文本API创建文本")]),t._v(" "),a("p",[t._v("幸运的是，我们可以借助于"),a("a",{attrs:{href:"https://opentype.js.org/",title:"opentype.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("opentype.js"),a("OutboundLink")],1),t._v("所提供的解决方案。它可以解析一个字体文件，然后，给定一个文本字符串，生成每个字符的字母形式。这个操作的实际结果是一个表示字符串的路径对象，然后可以将其呈现到上下文中。")]),t._v(" "),a("p",[t._v("这次我不必修改opentype库来导入它，因为它已经可以从"),a("a",{attrs:{href:"https://jspm.org/",title:"jspm",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSPM"),a("OutboundLink")],1),t._v("中获得。\n所以，如果你给JSPM一个npm包，它会自动生成一个ES6模块，你可以直接导入到你的浏览器中。这是非常棒的，因为我真的不想为了一个有趣的项目而使用打包工具。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import opentype from 'https://ga.jspm.io/npm:opentype.js@1.3.4/dist/opentype.module.js'\n\nopentype.load('fonts/firasans.otf')\n")])])]),a("p",[t._v("但这里有一个问题——它想通过网络加载字体，而我不能这样做!嗨,挫败了!")]),t._v(" "),a("p",[t._v("……而且?它还有一个接受数组缓冲区的解析方法。我将用base64编码字体，然后在我的模块中解码它。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import opentype from 'https://ga.jspm.io/npm:opentype.js@1.3.4/dist/opentype.module.js'\nimport base64 from 'https://ga.jspm.io/npm:base64-js@1.5.1/index.js'\n\nconst font = 'T1RUTwAKAIAAAwA ... 3 days later ... wAYABkAGgAbABwAIAKM'\n\nexport default opentype.parse(base64.toByteArray(font).buffer)\n")])])]),a("p",[t._v("我告诉过你worklet也没有处理base64字符串的api吗?atob和btoa都没有!我也不得不为此找到一个普通的JS实现。")]),t._v(" "),a("p",[t._v("我把这段代码放在它自己的文件中，因为它不太符合人体工程学……必须在剩下的代码旁边使用大约200kb的编码字体字符串。")]),t._v(" "),a("p",[t._v("这就是我如何滥用ES模块来加载我的字体。")]),t._v(" "),a("h3",{attrs:{id:"_5-渲染结果-另一种简单的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-渲染结果-另一种简单的方式"}},[t._v("#")]),t._v(" 5. 渲染结果，另一种简单的方式")]),t._v(" "),a("p",[t._v("从现在起，所有繁重的工作都由opentype库来完成，所以我所需要做的就是用一点数学知识来对齐。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("import font from './font.js'\n\nconst SQL = await initSqlJs({\n  locateFile: file => `./${file}`,\n});\n\nconst DB = new SQL.Database();\n\nDB.run('CREATE TABLE test (name TEXT NOT NULL)')\nDB.run(\n  'INSERT INTO test VALUES (?), (?), (?), (?)',\n  ['A', 'B', 'C', 'D']\n)\n\nclass SqlDB {\n  async paint(ctx, geom, properties) {\n    const query = DB.exec('SELECT * FROM test')\n    const result = query[0].values.join(', ')\n\n    const size = 48\n    const width = font.getAdvanceWidth(queryResults, size)\n    const point = {\n      x: (geom.width / 2) - (width / 2),\n      y: geom.height / 2\n    }\n\n    const path = font.getPath(result, point.x, point.y, size)\n    path.draw(ctx)\n  }\n}\n\nregisterPaint('sql-db', SqlDb)\n")])])]),a("p",[t._v("最好再来一些HTML和CSS看看发生了什么。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("<html>\n  <head>\n    <script>\n      CSS.paintWorklet.addModule('./cssdb.js')\n    <\/script>\n    <style>\n      main {\n        width: 100vw;\n        height: 100vh;\n        background: paint(sql-db);\n      }\n    </style>\n  </head>\n  <body>\n    <main></main>\n  </body>\n</html>\n")])])]),a("p",[t._v("成功了!但这里没有足够的CSS，而且查询是硬编码的。")]),t._v(" "),a("h3",{attrs:{id:"_6-通过css查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-通过css查询"}},[t._v("#")]),t._v(" 6. 通过CSS查询")]),t._v(" "),a("p",[t._v("如果必须使用CSS来查询数据库，那就更好了。事实上，这是我们可以在Paint Worker的上下文之外与其通信的唯一方式，因为没有与Web worker一样的消息传递API。")]),t._v(" "),a("p",[t._v("为此，需要一个定制的CSS属性。定义inputProperties的好处是可以订阅该属性的更改，因此如果该属性的值发生更改，它将重新呈现。不需要设置任何订阅者自己。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class SqlDb {\n  static get inputProperties() {\n    return [\n      '--sql-query',\n    ]\n  }\n\n  async paint(ctx, geom, properties) {\n    // ...\n    const query = DB.exec(String(properties.get('--sql-query')))\n  }\n}\n")])])]),a("p",[t._v("这些CSS属性被称为类型化属性，但它们本质上被封装在一个特殊的CSSProperty类中，而这个类本身并不是很有用。因此，你必须手动将其转换为字符串或数字或其他类似的使用它，如上所述。")]),t._v(" "),a("p",[t._v("现在对CSS做一个快速调整。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("main {\n  // ...\n  --sql-query: SELECT name FROM test;\n}\n")])])]),a("p",[t._v("引号在这里被故意省略了，因为否则在将字符串传递给数据库之前，我必须将它们从字符串中删除。也就是说，这很有效!")]),t._v(" "),a("p",[t._v("任务完成!")]),t._v(" "),a("p",[t._v("如果你玩过sqlcss。你会注意到我并没有满足于此。在进行了一些重构之后，又进行了一些更改。")]),t._v(" "),a("h3",{attrs:{id:"_7-导入数据库文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-导入数据库文件"}},[t._v("#")]),t._v(" 7. 导入数据库文件")]),t._v(" "),a("p",[t._v("硬编码数据库模式和实际数据，有点糟糕。它证明了这个概念，但我们肯定可以做得更好。")]),t._v(" "),a("p",[t._v("如果您可以查询任何您喜欢的数据库，只要您手边有数据库文件，那就太棒了。我只需要读取这个文件并对其进行base64编码，就像我对字体文件所做的那样。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const fileInput = document.getElementById('db-file')\nfileInput.onchange = () => {\n  const reader = new FileReader()\n  reader.readAsDataURL(fileInput.files[0])\n\n  reader.onload = () => {\n    document.documentElement.style.setProperty(\n        '--sql-database',\n        `url('${reader.result}')`\n    )\n  }\n}\n")])])]),a("p",[t._v("我为此做了一个额外的CSS属性，在这个属性中，您可以将SQLite数据库作为base64编码的数据URI提供。data URI只是为了显示并确保它对DOM是有效的;我将在Worker层面解析这些东西。")]),t._v(" "),a("p",[t._v("最后一步是使其更易于查询，因为否则您必须进入调试器来操作元素的CSS。")]),t._v(" "),a("h3",{attrs:{id:"_8-编写查询语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-编写查询语句"}},[t._v("#")]),t._v(" 8. 编写查询语句")]),t._v(" "),a("p",[t._v("这可能是项目中最简单的部分。自定义属性对于分号有一点问题，而SQLite并不关心末尾的分号是否被省略，所以最简单的做法是，如果在输入中找到它，就删除它。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const queryInput = document.getElementById('db-query')\nqueryInput.onchange = () => {\n  let query = queryInput.value;\n  if (query.endsWith(';')) {\n    query = query.slice(0, -1)\n  }\n\n    document.documentElement.style.setProperty(\n    '--sql-query',\n    queryInput.value\n  )\n}\n")])])]),a("p",[t._v("从现在开始，您可以使用CSS导入和浏览您自己的数据库了!")]),t._v(" "),a("hr"),t._v(" "),a("p",[a("img",{attrs:{src:"https://media.giphy.com/media/SSM6HdOicCahnOZ5hM/giphy.gif",alt:""}})]),t._v(" "),a("p",[t._v("我遗漏了一件事，就是所有这些查询结果特别多的时候，如何更好的渲染展示的问题。如果查询结果有很多，他们需要分开到单独的行。这与本文的主题--"),a("strong",[t._v("使用CSS连接到数据库")]),t._v('并没有太大关系，所以我认为在这里谈论这个问题并不合适，但如果你想进一步了解这个"荒谬"的概念，'),a("a",{attrs:{href:"https://git.sr.ht/~mrlee/sqlcss",title:"sqlcss git",target:"_blank",rel:"noopener noreferrer"}},[t._v("git上的代码都是可用的"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"译者补充"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#译者补充"}},[t._v("#")]),t._v(" 译者补充")]),t._v(" "),a("ol",[a("li",[t._v("SQLite作为由C语言编写的嵌入式数据库，广泛用于IOS和Android的App中，熟悉python的朋友可能会知道，SQLite3内置于python中。若有WEB前端的读者想要在浏览器端使用SQLite，推荐SQLite的Webassembly版--sql.js，基本与SQLite的使用没有太多区别。")]),t._v(" "),a("li",[t._v("部分demo如下:")])]),t._v(" "),a("p",[a("img",{attrs:{src:s(579),alt:""}})]),t._v(" "),a("p",[a("img",{attrs:{src:s(580),alt:""}})]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("关于jspm,这里引用其官网的介绍如下:jspm为导入映射提供了模块CDN和包管理，允许任何来自NPM的包都可以直接在浏览器中加载，无需进一步的工具。")])])])}),[],!1,null,null,null);e.default=n.exports}}]);